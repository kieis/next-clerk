import {
  __commonJS
} from "./chunk-NIMBE7W3.js";
import { constants } from "@clerk/backend";
import { authenticateRequest } from "./authenticateRequest";
var require_authenticateRequest_test = __commonJS({
  "src/authenticateRequest.test.ts"() {
    const mockNext = jest.fn();
    afterEach(() => {
      mockNext.mockReset();
    });
    const mockClerkClient = () => ({
      authenticateRequest: jest.fn()
    });
    describe("authenticateRequest", () => {
      it("correctly parses the req object", async () => {
        const req = {
          headers: {
            ["cookie"]: `${constants.Cookies.Session}=token; expires=Mon, 27 june 2022 12:00:00 UTC;${constants.Cookies.ClientUat}=token; expires=Mon, 27 june 2022 12:00:00 UTC;`,
            [constants.Headers.Authorization]: "Bearer token",
            [constants.Headers.ForwardedPort]: "port",
            [constants.Headers.ForwardedHost]: "host",
            host: "host",
            referer: "referer",
            "user-agent": "user-agent"
          },
          url: "/whatever?__query=true"
        };
        const options = {
          jwtKey: "jwtKey",
          authorizedParties: ["party1"]
        };
        const clerkClient = mockClerkClient();
        const apiKey = "apiKey";
        const secretKey = "";
        const frontendApi = "frontendApi";
        const publishableKey = "publishableKey";
        const searchParams = new URLSearchParams();
        searchParams.set("__query", "true");
        await authenticateRequest({
          clerkClient,
          apiKey,
          secretKey,
          frontendApi,
          publishableKey,
          req,
          options
        });
        expect(clerkClient.authenticateRequest).toHaveBeenCalledWith({
          authorizedParties: ["party1"],
          clientUat: "token",
          cookieToken: "token",
          forwardedHost: "host",
          forwardedPort: "port",
          apiKey,
          secretKey,
          frontendApi,
          publishableKey,
          headerToken: "token",
          host: "host",
          jwtKey: "jwtKey",
          referrer: "referer",
          userAgent: "user-agent",
          isSatellite: false,
          proxyUrl: "",
          signInUrl: "",
          domain: "",
          searchParams
        });
      });
    });
  }
});
export default require_authenticateRequest_test();

import "./chunk-NIMBE7W3.js";
import { Clerk as _Clerk, decodeJwt, verifyToken as _verifyToken } from "@clerk/backend";
import { createClerkExpressRequireAuth } from "./clerkExpressRequireAuth";
import { createClerkExpressWithAuth } from "./clerkExpressWithAuth";
import { loadApiEnv, loadClientEnv } from "./utils";
function Clerk(options) {
  const clerkClient2 = _Clerk(options);
  const expressWithAuth = createClerkExpressWithAuth({ ...options, clerkClient: clerkClient2 });
  const expressRequireAuth = createClerkExpressRequireAuth({ ...options, clerkClient: clerkClient2 });
  const verifyToken = (token, verifyOpts) => {
    const issuer = (iss) => iss.startsWith("https://clerk.") || iss.includes(".clerk.accounts");
    return _verifyToken(token, { issuer, ...options, ...verifyOpts });
  };
  return {
    ...clerkClient2,
    expressWithAuth,
    expressRequireAuth,
    verifyToken,
    ...createBasePropForRedwoodCompatibility()
  };
}
const createBasePropForRedwoodCompatibility = () => {
  const verifySessionToken = (token) => {
    const { payload } = decodeJwt(token);
    return _verifyToken(token, {
      issuer: payload.iss,
      jwtKey: process.env.CLERK_JWT_KEY
    });
  };
  return { base: { verifySessionToken } };
};
const createClerkClient = Clerk;
let clerkClientSingleton = {};
const clerkClient = new Proxy(clerkClientSingleton, {
  get(_target, property) {
    const hasBeenInitialised = !!clerkClientSingleton.authenticateRequest;
    if (hasBeenInitialised) {
      return clerkClientSingleton[property];
    }
    const env = { ...loadApiEnv(), ...loadClientEnv() };
    if (env.secretKey) {
      clerkClientSingleton = Clerk({ ...env, userAgent: "@clerk/clerk-sdk-node" });
      return clerkClientSingleton[property];
    }
    return Clerk({ ...env, userAgent: "@clerk/clerk-sdk-node" })[property];
  },
  set() {
    return false;
  }
});
const ClerkExpressRequireAuth = (...args) => {
  const env = { ...loadApiEnv(), ...loadClientEnv() };
  const fn = createClerkExpressRequireAuth({ clerkClient, ...env });
  return fn(...args);
};
const ClerkExpressWithAuth = (...args) => {
  const env = { ...loadApiEnv(), ...loadClientEnv() };
  const fn = createClerkExpressWithAuth({ clerkClient, ...env });
  return fn(...args);
};
const setClerkApiKey = (value) => {
  clerkClient.__unstable_options.apiKey = value;
};
const setClerkServerApiUrl = (value) => {
  clerkClient.__unstable_options.apiUrl = value;
};
const setClerkApiVersion = (value) => {
  clerkClient.__unstable_options.apiVersion = value;
};
const setClerkHttpOptions = (value) => {
  clerkClient.__unstable_options.httpOptions = value;
};
export {
  Clerk,
  ClerkExpressRequireAuth,
  ClerkExpressWithAuth,
  clerkClient,
  createClerkClient,
  setClerkApiKey,
  setClerkApiVersion,
  setClerkHttpOptions,
  setClerkServerApiUrl
};

import "./chunk-NIMBE7W3.js";
import { constants } from "@clerk/backend";
import cookie from "cookie";
import { handleValueOrFn, isHttpOrHttps, isProxyUrlRelative, isValidProxyUrl } from "./shared";
import { loadApiEnv, loadClientEnv } from "./utils";
const parseCookies = (req) => {
  return cookie.parse(req.headers["cookie"] || "");
};
async function loadInterstitial({
  clerkClient,
  requestState
}) {
  const { clerkJSVersion, clerkJSUrl } = loadClientEnv();
  if (requestState.publishableKey || requestState.frontendApi) {
    return clerkClient.localInterstitial({
      frontendApi: requestState.frontendApi,
      publishableKey: requestState.publishableKey,
      proxyUrl: requestState.proxyUrl,
      signInUrl: requestState.signInUrl,
      isSatellite: requestState.isSatellite,
      domain: requestState.domain,
      clerkJSVersion,
      clerkJSUrl
    });
  }
  return await clerkClient.remotePrivateInterstitial();
}
const authenticateRequest = (opts) => {
  const { clerkClient, apiKey, secretKey, frontendApi, publishableKey, req, options } = opts;
  const { jwtKey, authorizedParties, audience } = options || {};
  const env = { ...loadApiEnv(), ...loadClientEnv() };
  const requestUrl = getRequestUrl(req);
  const isSatellite = handleValueOrFn(options?.isSatellite, requestUrl, env.isSatellite);
  const domain = handleValueOrFn(options?.domain, requestUrl) || env.domain;
  const signInUrl = options?.signInUrl || env.signInUrl;
  const proxyUrl = absoluteProxyUrl(
    handleValueOrFn(options?.proxyUrl, requestUrl, env.proxyUrl),
    requestUrl.toString()
  );
  if (isSatellite && !proxyUrl && !domain) {
    throw new Error(satelliteAndMissingProxyUrlAndDomain);
  }
  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromApiKey(secretKey)) {
    throw new Error(satelliteAndMissingSignInUrl);
  }
  const cookies = parseCookies(req);
  return clerkClient.authenticateRequest({
    audience,
    apiKey,
    secretKey,
    frontendApi,
    publishableKey,
    jwtKey,
    authorizedParties,
    cookieToken: cookies[constants.Cookies.Session] || "",
    headerToken: req.headers[constants.Headers.Authorization]?.replace("Bearer ", "") || "",
    clientUat: cookies[constants.Cookies.ClientUat] || "",
    host: req.headers.host,
    forwardedPort: req.headers[constants.Headers.ForwardedPort],
    forwardedHost: req.headers[constants.Headers.ForwardedHost],
    referrer: req.headers.referer,
    userAgent: req.headers[constants.Headers.UserAgent],
    proxyUrl,
    isSatellite,
    domain,
    signInUrl,
    searchParams: requestUrl.searchParams
  });
};
const handleUnknownCase = (res, requestState) => {
  if (requestState.isUnknown) {
    res.writeHead(401, { "Content-Type": "text/html" });
    res.end();
  }
};
const handleInterstitialCase = (res, requestState, interstitial) => {
  if (requestState.isInterstitial) {
    res.writeHead(401, { "Content-Type": "text/html" });
    res.end(interstitial);
  }
};
const decorateResponseWithObservabilityHeaders = (res, requestState) => {
  requestState.message && res.setHeader(constants.Headers.AuthMessage, encodeURIComponent(requestState.message));
  requestState.reason && res.setHeader(constants.Headers.AuthReason, encodeURIComponent(requestState.reason));
  requestState.status && res.setHeader(constants.Headers.AuthStatus, encodeURIComponent(requestState.status));
};
const isDevelopmentFromApiKey = (apiKey) => apiKey.startsWith("test_") || apiKey.startsWith("sk_test_");
const getRequestUrl = (req) => {
  return new URL(req.url, `${getRequestProto(req)}://${req.headers.host}`);
};
const getRequestProto = (req) => {
  const mightWork = req.connection?.encrypted ? "https" : "http";
  const proto = req.headers[constants.Headers.ForwardedProto] || mightWork;
  if (!proto) {
    throw new Error(missingProto);
  }
  return proto.split(",")[0].trim();
};
const absoluteProxyUrl = (relativeOrAbsoluteUrl, baseUrl) => {
  if (!relativeOrAbsoluteUrl || !isValidProxyUrl(relativeOrAbsoluteUrl) || !isProxyUrlRelative(relativeOrAbsoluteUrl)) {
    return relativeOrAbsoluteUrl;
  }
  return new URL(relativeOrAbsoluteUrl, baseUrl).toString();
};
const satelliteAndMissingProxyUrlAndDomain = "Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl";
const satelliteAndMissingSignInUrl = `
Invalid signInUrl. A satellite application requires a signInUrl for development instances.
Check if signInUrl is missing from your configuration or if it is not an absolute URL.`;
const missingProto = "Cannot determine the request protocol. Please ensure you've set the X-Forwarded-Proto header with the request protocol (http or https).";
export {
  authenticateRequest,
  decorateResponseWithObservabilityHeaders,
  handleInterstitialCase,
  handleUnknownCase,
  loadInterstitial
};

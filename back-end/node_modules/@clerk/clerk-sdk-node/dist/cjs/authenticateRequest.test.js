"use strict";
var import_backend = require("@clerk/backend");
var import_authenticateRequest = require("./authenticateRequest");
const mockNext = jest.fn();
afterEach(() => {
  mockNext.mockReset();
});
const mockClerkClient = () => ({
  authenticateRequest: jest.fn()
});
describe("authenticateRequest", () => {
  it("correctly parses the req object", async () => {
    const req = {
      headers: {
        ["cookie"]: `${import_backend.constants.Cookies.Session}=token; expires=Mon, 27 june 2022 12:00:00 UTC;${import_backend.constants.Cookies.ClientUat}=token; expires=Mon, 27 june 2022 12:00:00 UTC;`,
        [import_backend.constants.Headers.Authorization]: "Bearer token",
        [import_backend.constants.Headers.ForwardedPort]: "port",
        [import_backend.constants.Headers.ForwardedHost]: "host",
        host: "host",
        referer: "referer",
        "user-agent": "user-agent"
      },
      url: "/whatever?__query=true"
    };
    const options = {
      jwtKey: "jwtKey",
      authorizedParties: ["party1"]
    };
    const clerkClient = mockClerkClient();
    const apiKey = "apiKey";
    const secretKey = "";
    const frontendApi = "frontendApi";
    const publishableKey = "publishableKey";
    const searchParams = new URLSearchParams();
    searchParams.set("__query", "true");
    await (0, import_authenticateRequest.authenticateRequest)({
      clerkClient,
      apiKey,
      secretKey,
      frontendApi,
      publishableKey,
      req,
      options
    });
    expect(clerkClient.authenticateRequest).toHaveBeenCalledWith({
      authorizedParties: ["party1"],
      clientUat: "token",
      cookieToken: "token",
      forwardedHost: "host",
      forwardedPort: "port",
      apiKey,
      secretKey,
      frontendApi,
      publishableKey,
      headerToken: "token",
      host: "host",
      jwtKey: "jwtKey",
      referrer: "referer",
      userAgent: "user-agent",
      isSatellite: false,
      proxyUrl: "",
      signInUrl: "",
      domain: "",
      searchParams
    });
  });
});

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var authenticateRequest_exports = {};
__export(authenticateRequest_exports, {
  authenticateRequest: () => authenticateRequest,
  decorateResponseWithObservabilityHeaders: () => decorateResponseWithObservabilityHeaders,
  handleInterstitialCase: () => handleInterstitialCase,
  handleUnknownCase: () => handleUnknownCase,
  loadInterstitial: () => loadInterstitial
});
module.exports = __toCommonJS(authenticateRequest_exports);
var import_backend = require("@clerk/backend");
var import_cookie = __toESM(require("cookie"));
var import_shared = require("./shared");
var import_utils = require("./utils");
const parseCookies = (req) => {
  return import_cookie.default.parse(req.headers["cookie"] || "");
};
async function loadInterstitial({
  clerkClient,
  requestState
}) {
  const { clerkJSVersion, clerkJSUrl } = (0, import_utils.loadClientEnv)();
  if (requestState.publishableKey || requestState.frontendApi) {
    return clerkClient.localInterstitial({
      frontendApi: requestState.frontendApi,
      publishableKey: requestState.publishableKey,
      proxyUrl: requestState.proxyUrl,
      signInUrl: requestState.signInUrl,
      isSatellite: requestState.isSatellite,
      domain: requestState.domain,
      clerkJSVersion,
      clerkJSUrl
    });
  }
  return await clerkClient.remotePrivateInterstitial();
}
const authenticateRequest = (opts) => {
  const { clerkClient, apiKey, secretKey, frontendApi, publishableKey, req, options } = opts;
  const { jwtKey, authorizedParties, audience } = options || {};
  const env = { ...(0, import_utils.loadApiEnv)(), ...(0, import_utils.loadClientEnv)() };
  const requestUrl = getRequestUrl(req);
  const isSatellite = (0, import_shared.handleValueOrFn)(options?.isSatellite, requestUrl, env.isSatellite);
  const domain = (0, import_shared.handleValueOrFn)(options?.domain, requestUrl) || env.domain;
  const signInUrl = options?.signInUrl || env.signInUrl;
  const proxyUrl = absoluteProxyUrl(
    (0, import_shared.handleValueOrFn)(options?.proxyUrl, requestUrl, env.proxyUrl),
    requestUrl.toString()
  );
  if (isSatellite && !proxyUrl && !domain) {
    throw new Error(satelliteAndMissingProxyUrlAndDomain);
  }
  if (isSatellite && !(0, import_shared.isHttpOrHttps)(signInUrl) && isDevelopmentFromApiKey(secretKey)) {
    throw new Error(satelliteAndMissingSignInUrl);
  }
  const cookies = parseCookies(req);
  return clerkClient.authenticateRequest({
    audience,
    apiKey,
    secretKey,
    frontendApi,
    publishableKey,
    jwtKey,
    authorizedParties,
    cookieToken: cookies[import_backend.constants.Cookies.Session] || "",
    headerToken: req.headers[import_backend.constants.Headers.Authorization]?.replace("Bearer ", "") || "",
    clientUat: cookies[import_backend.constants.Cookies.ClientUat] || "",
    host: req.headers.host,
    forwardedPort: req.headers[import_backend.constants.Headers.ForwardedPort],
    forwardedHost: req.headers[import_backend.constants.Headers.ForwardedHost],
    referrer: req.headers.referer,
    userAgent: req.headers[import_backend.constants.Headers.UserAgent],
    proxyUrl,
    isSatellite,
    domain,
    signInUrl,
    searchParams: requestUrl.searchParams
  });
};
const handleUnknownCase = (res, requestState) => {
  if (requestState.isUnknown) {
    res.writeHead(401, { "Content-Type": "text/html" });
    res.end();
  }
};
const handleInterstitialCase = (res, requestState, interstitial) => {
  if (requestState.isInterstitial) {
    res.writeHead(401, { "Content-Type": "text/html" });
    res.end(interstitial);
  }
};
const decorateResponseWithObservabilityHeaders = (res, requestState) => {
  requestState.message && res.setHeader(import_backend.constants.Headers.AuthMessage, encodeURIComponent(requestState.message));
  requestState.reason && res.setHeader(import_backend.constants.Headers.AuthReason, encodeURIComponent(requestState.reason));
  requestState.status && res.setHeader(import_backend.constants.Headers.AuthStatus, encodeURIComponent(requestState.status));
};
const isDevelopmentFromApiKey = (apiKey) => apiKey.startsWith("test_") || apiKey.startsWith("sk_test_");
const getRequestUrl = (req) => {
  return new URL(req.url, `${getRequestProto(req)}://${req.headers.host}`);
};
const getRequestProto = (req) => {
  const mightWork = req.connection?.encrypted ? "https" : "http";
  const proto = req.headers[import_backend.constants.Headers.ForwardedProto] || mightWork;
  if (!proto) {
    throw new Error(missingProto);
  }
  return proto.split(",")[0].trim();
};
const absoluteProxyUrl = (relativeOrAbsoluteUrl, baseUrl) => {
  if (!relativeOrAbsoluteUrl || !(0, import_shared.isValidProxyUrl)(relativeOrAbsoluteUrl) || !(0, import_shared.isProxyUrlRelative)(relativeOrAbsoluteUrl)) {
    return relativeOrAbsoluteUrl;
  }
  return new URL(relativeOrAbsoluteUrl, baseUrl).toString();
};
const satelliteAndMissingProxyUrlAndDomain = "Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl";
const satelliteAndMissingSignInUrl = `
Invalid signInUrl. A satellite application requires a signInUrl for development instances.
Check if signInUrl is missing from your configuration or if it is not an absolute URL.`;
const missingProto = "Cannot determine the request protocol. Please ensure you've set the X-Forwarded-Proto header with the request protocol (http or https).";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  authenticateRequest,
  decorateResponseWithObservabilityHeaders,
  handleInterstitialCase,
  handleUnknownCase,
  loadInterstitial
});

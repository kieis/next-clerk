{"version":3,"sources":["../../../../node_modules/cookie/index.js","../../src/clerkPlugin.ts","../../src/types.ts","../../src/withClerkMiddleware.ts","../../src/clerkClient.ts","../../src/constants.ts","../../src/utils.ts","../../src/errors.ts","../../src/getAuth.ts"],"sourcesContent":["/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n","import type { FastifyInstance, FastifyPluginCallback } from 'fastify';\nimport fp from 'fastify-plugin';\n\nimport type { ClerkFastifyOptions } from './types';\nimport { ALLOWED_HOOKS } from './types';\nimport { withClerkMiddleware } from './withClerkMiddleware';\n\nconst plugin: FastifyPluginCallback = (instance: FastifyInstance, opts: ClerkFastifyOptions, done) => {\n  instance.decorateRequest('auth', null);\n  // run clerk as a middleware to all scoped routes\n  const hookName = opts.hookName || 'preHandler';\n  if (!ALLOWED_HOOKS.includes(hookName)) {\n    throw new Error(`Unsupported hookName: ${hookName}`);\n  }\n\n  // @ts-expect-error unions don't play well with TS overload signatures\n  instance.addHook(hookName, withClerkMiddleware(opts));\n\n  done();\n};\n\nexport const clerkPlugin = fp(plugin, {\n  name: '@clerk/fastify',\n  fastify: '4.x',\n});\n","import type { ClerkOptions } from '@clerk/backend';\n\nexport const ALLOWED_HOOKS = ['onRequest', 'preHandler'] as const;\n\nexport type ClerkFastifyOptions = Omit<ClerkOptions, 'apiKey'> & {\n  hookName?: (typeof ALLOWED_HOOKS)[number];\n};\n","import { parse } from 'cookie';\nimport type { FastifyReply, FastifyRequest } from 'fastify';\n\nimport { clerkClient } from './clerkClient';\nimport * as constants from './constants';\nimport type { ClerkFastifyOptions } from './types';\nimport { getSingleValueFromArrayHeader } from './utils';\n\nexport const withClerkMiddleware = (options: ClerkFastifyOptions) => {\n  return async (req: FastifyRequest, reply: FastifyReply) => {\n    const cookies = parse(req.raw.headers.cookie || '');\n    const secretKey = options.secretKey || constants.SECRET_KEY;\n    const publishableKey = options.publishableKey || constants.PUBLISHABLE_KEY;\n\n    // get auth state, check if we need to return an interstitial\n    const cookieToken = cookies[constants.Cookies.Session];\n    const headerToken = req.headers['authorization']?.replace('Bearer ', '');\n\n    const forwardedPort = getSingleValueFromArrayHeader(req.headers['x-forwarded-port']);\n    const forwardedHost = getSingleValueFromArrayHeader(req.headers['x-forwarded-host']);\n\n    const requestState = await clerkClient.authenticateRequest({\n      ...options,\n      secretKey,\n      publishableKey,\n      apiKey: constants.API_KEY,\n      frontendApi: constants.FRONTEND_API,\n      cookieToken,\n      headerToken,\n      clientUat: cookies[constants.Cookies.ClientUat],\n      origin: req.headers['origin'] || undefined,\n      host: req.headers['host'] as string,\n      forwardedPort,\n      forwardedHost,\n      referrer: req.headers['referer'] || undefined,\n      userAgent: req.headers['user-agent'] || undefined,\n    });\n\n    // Interstitial cases\n    if (requestState.isUnknown) {\n      return reply\n        .code(401)\n        .header(constants.Headers.AuthReason, requestState.reason)\n        .header(constants.Headers.AuthMessage, requestState.message)\n        .send();\n    }\n\n    if (requestState.isInterstitial) {\n      const interstitialHtmlPage = clerkClient.localInterstitial({\n        publishableKey,\n        frontendApi: constants.FRONTEND_API,\n      });\n\n      return reply\n        .code(401)\n        .header(constants.Headers.AuthReason, requestState.reason)\n        .header(constants.Headers.AuthMessage, requestState.message)\n        .type('text/html')\n        .send(interstitialHtmlPage);\n    }\n\n    // @ts-ignore\n    req.auth = requestState.toAuth();\n  };\n};\n","import { Clerk } from '@clerk/backend';\n\nimport { API_URL, API_VERSION, JWT_KEY, SECRET_KEY } from './constants';\n\nexport const createClerkClient = Clerk;\n\nexport const clerkClient = createClerkClient({\n  secretKey: SECRET_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  jwtKey: JWT_KEY,\n});\n","import { constants } from '@clerk/backend';\n\nexport const API_URL = process.env.CLERK_API_URL || 'https://api.clerk.dev';\nexport const API_VERSION = process.env.CLERK_API_VERSION || 'v1';\n/**\n * Backend API key\n * @deprecated Use `CLERK_SECRET_KEY` instead.\n */\nexport const API_KEY = process.env.CLERK_API_KEY || '';\nexport const SECRET_KEY = process.env.CLERK_SECRET_KEY || '';\n/**\n * @deprecated Use `CLERK_PUBLISHABLE_KEY` instead.\n */\nexport const FRONTEND_API = process.env.CLERK_FRONTEND_API || '';\nexport const PUBLISHABLE_KEY = process.env.CLERK_PUBLISHABLE_KEY || '';\nexport const JWT_KEY = process.env.CLERK_JWT_KEY || '';\n\nexport const { Cookies, Headers } = constants;\n","export const getSingleValueFromArrayHeader = (value?: string[] | string): string | undefined => {\n  return (Array.isArray(value) ? value[0] : value) || undefined;\n};\n","// https://github.com/clerkinc/javascript/blob/main/packages/remix/src/errors.ts#L1-L0\nconst createErrorMessage = (msg: string) => {\n  return `🔒 Clerk: ${msg.trim()}\n\nFor more info, check out the docs: https://clerk.com/docs,\nor come say hi in our discord server: https://clerk.com/discord\n`;\n};\n\nexport const pluginRegistrationRequired =\n  createErrorMessage(`The \"clerkPlugin\" should be registered before using the \"getAuth\".\nExample:\n\nimport { clerkPlugin } from '@clerk/fastify';\n\nconst server: FastifyInstance = Fastify({ logger: true });\nserver.register(clerkPlugin);\n`);\n","import type { AuthObject } from '@clerk/backend';\nimport type { FastifyRequest } from 'fastify';\n\nimport { pluginRegistrationRequired } from './errors';\n\ntype FastifyRequestWithAuth = FastifyRequest & { auth: AuthObject };\n\nexport const getAuth = (req: FastifyRequest): AuthObject => {\n  const authReq = req as FastifyRequestWithAuth;\n\n  if (!authReq.auth) {\n    throw new Error(pluginRegistrationRequired);\n  }\n\n  return authReq.auth;\n};\n"],"mappings":"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","names":["require_cookie","__commonJSMin","exports","parse","serialize","__toString","fieldContentRegExp","str","options","obj","opt","dec","decode","index","eqIdx","endIdx","key","val","tryDecode","name","enc","encode","value","maxAge","expires","isDate","priority","sameSite","fp","ALLOWED_HOOKS","import_cookie","Clerk","constants","API_URL","API_VERSION","API_KEY","SECRET_KEY","FRONTEND_API","PUBLISHABLE_KEY","JWT_KEY","Cookies","Headers","createClerkClient","Clerk","clerkClient","SECRET_KEY","API_URL","API_VERSION","JWT_KEY","getSingleValueFromArrayHeader","value","withClerkMiddleware","options","req","reply","cookies","secretKey","SECRET_KEY","publishableKey","PUBLISHABLE_KEY","cookieToken","Cookies","headerToken","forwardedPort","getSingleValueFromArrayHeader","forwardedHost","requestState","clerkClient","API_KEY","FRONTEND_API","Headers","interstitialHtmlPage","plugin","instance","opts","done","hookName","ALLOWED_HOOKS","withClerkMiddleware","clerkPlugin","fp","createErrorMessage","msg","pluginRegistrationRequired","getAuth","req","authReq","pluginRegistrationRequired"]}